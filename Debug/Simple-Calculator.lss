
Simple-Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000061e  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  00800086  00800086  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e7  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bc  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073b  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f1  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006aa  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3e       	cpi	r26, 0xEC	; 236
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  8a:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	81 bb       	out	0x11, r24	; 17
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	81 bb       	out	0x11, r24	; 17
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <Keypad_getkey>:
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	c0 e6       	ldi	r28, 0x60	; 96
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	de 01       	movw	r26, r28
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	92 b3       	in	r25, 0x12	; 18
  c0:	fa 01       	movw	r30, r20
  c2:	0c 90       	ld	r0, X
  c4:	02 c0       	rjmp	.+4      	; 0xca <Keypad_getkey+0x26>
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Keypad_getkey+0x22>
  ce:	9a 01       	movw	r18, r20
  d0:	12 96       	adiw	r26, 0x02	; 2
  d2:	0c 90       	ld	r0, X
  d4:	12 97       	sbiw	r26, 0x02	; 2
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Keypad_getkey+0x38>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Keypad_getkey+0x34>
  e0:	2e 2b       	or	r18, r30
  e2:	82 2f       	mov	r24, r18
  e4:	89 2b       	or	r24, r25
  e6:	9a 01       	movw	r18, r20
  e8:	14 96       	adiw	r26, 0x04	; 4
  ea:	0c 90       	ld	r0, X
  ec:	14 97       	sbiw	r26, 0x04	; 4
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Keypad_getkey+0x50>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Keypad_getkey+0x4c>
  f8:	28 2b       	or	r18, r24
  fa:	ca 01       	movw	r24, r20
  fc:	16 96       	adiw	r26, 0x06	; 6
  fe:	0c 90       	ld	r0, X
 100:	16 97       	sbiw	r26, 0x06	; 6
 102:	02 c0       	rjmp	.+4      	; 0x108 <Keypad_getkey+0x64>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <Keypad_getkey+0x60>
 10c:	82 2b       	or	r24, r18
 10e:	82 bb       	out	0x12, r24	; 18
 110:	92 b3       	in	r25, 0x12	; 18
 112:	88 81       	ld	r24, Y
 114:	22 96       	adiw	r28, 0x02	; 2
 116:	9a 01       	movw	r18, r20
 118:	02 c0       	rjmp	.+4      	; 0x11e <Keypad_getkey+0x7a>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <Keypad_getkey+0x76>
 122:	82 2f       	mov	r24, r18
 124:	80 95       	com	r24
 126:	89 23       	and	r24, r25
 128:	82 bb       	out	0x12, r24	; 18
 12a:	e8 e6       	ldi	r30, 0x68	; 104
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 24       	eor	r14, r14
 130:	e3 94       	inc	r14
 132:	f1 2c       	mov	r15, r1
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	05 c0       	rjmp	.+10     	; 0x144 <Keypad_getkey+0xa0>
 13a:	0f 5f       	subi	r16, 0xFF	; 255
 13c:	1f 4f       	sbci	r17, 0xFF	; 255
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	e8 1a       	sub	r14, r24
 142:	f8 0a       	sbc	r15, r24
 144:	80 b3       	in	r24, 0x10	; 16
 146:	20 81       	ld	r18, Z
 148:	32 96       	adiw	r30, 0x02	; 2
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Keypad_getkey+0xb0>
 150:	95 95       	asr	r25
 152:	87 95       	ror	r24
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <Keypad_getkey+0xac>
 158:	80 fd       	sbrc	r24, 0
 15a:	50 c0       	rjmp	.+160    	; 0x1fc <Keypad_getkey+0x158>
 15c:	ca 01       	movw	r24, r20
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Keypad_getkey+0xc0>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <Keypad_getkey+0xbc>
 168:	9c 01       	movw	r18, r24
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	82 23       	and	r24, r18
 170:	93 23       	and	r25, r19
 172:	89 2b       	or	r24, r25
 174:	d1 f3       	breq	.-12     	; 0x16a <Keypad_getkey+0xc6>
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	71 05       	cpc	r23, r1
 17a:	c9 f0       	breq	.+50     	; 0x1ae <Keypad_getkey+0x10a>
 17c:	24 f4       	brge	.+8      	; 0x186 <Keypad_getkey+0xe2>
 17e:	61 15       	cp	r22, r1
 180:	71 05       	cpc	r23, r1
 182:	41 f0       	breq	.+16     	; 0x194 <Keypad_getkey+0xf0>
 184:	3b c0       	rjmp	.+118    	; 0x1fc <Keypad_getkey+0x158>
 186:	62 30       	cpi	r22, 0x02	; 2
 188:	71 05       	cpc	r23, r1
 18a:	f1 f0       	breq	.+60     	; 0x1c8 <Keypad_getkey+0x124>
 18c:	63 30       	cpi	r22, 0x03	; 3
 18e:	71 05       	cpc	r23, r1
 190:	41 f1       	breq	.+80     	; 0x1e2 <Keypad_getkey+0x13e>
 192:	34 c0       	rjmp	.+104    	; 0x1fc <Keypad_getkey+0x158>
 194:	01 15       	cp	r16, r1
 196:	11 05       	cpc	r17, r1
 198:	f1 f1       	breq	.+124    	; 0x216 <Keypad_getkey+0x172>
 19a:	01 30       	cpi	r16, 0x01	; 1
 19c:	11 05       	cpc	r17, r1
 19e:	e9 f1       	breq	.+122    	; 0x21a <Keypad_getkey+0x176>
 1a0:	02 30       	cpi	r16, 0x02	; 2
 1a2:	11 05       	cpc	r17, r1
 1a4:	e1 f1       	breq	.+120    	; 0x21e <Keypad_getkey+0x17a>
 1a6:	03 30       	cpi	r16, 0x03	; 3
 1a8:	11 05       	cpc	r17, r1
 1aa:	41 f5       	brne	.+80     	; 0x1fc <Keypad_getkey+0x158>
 1ac:	3a c0       	rjmp	.+116    	; 0x222 <Keypad_getkey+0x17e>
 1ae:	01 15       	cp	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	c9 f1       	breq	.+114    	; 0x226 <Keypad_getkey+0x182>
 1b4:	01 30       	cpi	r16, 0x01	; 1
 1b6:	11 05       	cpc	r17, r1
 1b8:	c1 f1       	breq	.+112    	; 0x22a <Keypad_getkey+0x186>
 1ba:	02 30       	cpi	r16, 0x02	; 2
 1bc:	11 05       	cpc	r17, r1
 1be:	b9 f1       	breq	.+110    	; 0x22e <Keypad_getkey+0x18a>
 1c0:	03 30       	cpi	r16, 0x03	; 3
 1c2:	11 05       	cpc	r17, r1
 1c4:	d9 f4       	brne	.+54     	; 0x1fc <Keypad_getkey+0x158>
 1c6:	35 c0       	rjmp	.+106    	; 0x232 <Keypad_getkey+0x18e>
 1c8:	01 15       	cp	r16, r1
 1ca:	11 05       	cpc	r17, r1
 1cc:	a1 f1       	breq	.+104    	; 0x236 <Keypad_getkey+0x192>
 1ce:	01 30       	cpi	r16, 0x01	; 1
 1d0:	11 05       	cpc	r17, r1
 1d2:	99 f1       	breq	.+102    	; 0x23a <Keypad_getkey+0x196>
 1d4:	02 30       	cpi	r16, 0x02	; 2
 1d6:	11 05       	cpc	r17, r1
 1d8:	91 f1       	breq	.+100    	; 0x23e <Keypad_getkey+0x19a>
 1da:	03 30       	cpi	r16, 0x03	; 3
 1dc:	11 05       	cpc	r17, r1
 1de:	71 f4       	brne	.+28     	; 0x1fc <Keypad_getkey+0x158>
 1e0:	30 c0       	rjmp	.+96     	; 0x242 <Keypad_getkey+0x19e>
 1e2:	01 15       	cp	r16, r1
 1e4:	11 05       	cpc	r17, r1
 1e6:	79 f1       	breq	.+94     	; 0x246 <Keypad_getkey+0x1a2>
 1e8:	01 30       	cpi	r16, 0x01	; 1
 1ea:	11 05       	cpc	r17, r1
 1ec:	71 f1       	breq	.+92     	; 0x24a <Keypad_getkey+0x1a6>
 1ee:	02 30       	cpi	r16, 0x02	; 2
 1f0:	11 05       	cpc	r17, r1
 1f2:	69 f1       	breq	.+90     	; 0x24e <Keypad_getkey+0x1aa>
 1f4:	03 30       	cpi	r16, 0x03	; 3
 1f6:	11 05       	cpc	r17, r1
 1f8:	71 f5       	brne	.+92     	; 0x256 <Keypad_getkey+0x1b2>
 1fa:	2b c0       	rjmp	.+86     	; 0x252 <Keypad_getkey+0x1ae>
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	e9 16       	cp	r14, r25
 200:	f1 04       	cpc	r15, r1
 202:	0c f4       	brge	.+2      	; 0x206 <Keypad_getkey+0x162>
 204:	9a cf       	rjmp	.-204    	; 0x13a <Keypad_getkey+0x96>
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	64 30       	cpi	r22, 0x04	; 4
 20c:	71 05       	cpc	r23, r1
 20e:	09 f0       	breq	.+2      	; 0x212 <Keypad_getkey+0x16e>
 210:	56 cf       	rjmp	.-340    	; 0xbe <Keypad_getkey+0x1a>
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	26 c0       	rjmp	.+76     	; 0x262 <Keypad_getkey+0x1be>
 216:	87 e3       	ldi	r24, 0x37	; 55
 218:	24 c0       	rjmp	.+72     	; 0x262 <Keypad_getkey+0x1be>
 21a:	84 e3       	ldi	r24, 0x34	; 52
 21c:	22 c0       	rjmp	.+68     	; 0x262 <Keypad_getkey+0x1be>
 21e:	81 e3       	ldi	r24, 0x31	; 49
 220:	20 c0       	rjmp	.+64     	; 0x262 <Keypad_getkey+0x1be>
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	1e c0       	rjmp	.+60     	; 0x262 <Keypad_getkey+0x1be>
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	1c c0       	rjmp	.+56     	; 0x262 <Keypad_getkey+0x1be>
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	1a c0       	rjmp	.+52     	; 0x262 <Keypad_getkey+0x1be>
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	18 c0       	rjmp	.+48     	; 0x262 <Keypad_getkey+0x1be>
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	16 c0       	rjmp	.+44     	; 0x262 <Keypad_getkey+0x1be>
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	14 c0       	rjmp	.+40     	; 0x262 <Keypad_getkey+0x1be>
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	12 c0       	rjmp	.+36     	; 0x262 <Keypad_getkey+0x1be>
 23e:	83 e3       	ldi	r24, 0x33	; 51
 240:	10 c0       	rjmp	.+32     	; 0x262 <Keypad_getkey+0x1be>
 242:	8d e3       	ldi	r24, 0x3D	; 61
 244:	0e c0       	rjmp	.+28     	; 0x262 <Keypad_getkey+0x1be>
 246:	8f e2       	ldi	r24, 0x2F	; 47
 248:	0c c0       	rjmp	.+24     	; 0x262 <Keypad_getkey+0x1be>
 24a:	8a e2       	ldi	r24, 0x2A	; 42
 24c:	0a c0       	rjmp	.+20     	; 0x262 <Keypad_getkey+0x1be>
 24e:	8d e2       	ldi	r24, 0x2D	; 45
 250:	08 c0       	rjmp	.+16     	; 0x262 <Keypad_getkey+0x1be>
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	06 c0       	rjmp	.+12     	; 0x262 <Keypad_getkey+0x1be>
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	e8 16       	cp	r14, r24
 25a:	f1 04       	cpc	r15, r1
 25c:	0c f4       	brge	.+2      	; 0x260 <Keypad_getkey+0x1bc>
 25e:	6d cf       	rjmp	.-294    	; 0x13a <Keypad_getkey+0x96>
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	08 95       	ret

00000270 <LCD_lcd_kick>:
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 270:	c0 9a       	sbi	0x18, 0	; 24
 272:	83 ed       	ldi	r24, 0xD3	; 211
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_lcd_kick+0x6>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_lcd_kick+0xc>
 27c:	00 00       	nop
 27e:	c0 98       	cbi	0x18, 0	; 24
 280:	08 95       	ret

00000282 <LCD_check_lcd_isbusy>:
 282:	8a b3       	in	r24, 0x1a	; 26
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	8a bb       	out	0x1a, r24	; 26
 288:	c2 9a       	sbi	0x18, 2	; 24
 28a:	c1 98       	cbi	0x18, 1	; 24
 28c:	0e 94 38 01 	call	0x270	; 0x270 <LCD_lcd_kick>
 290:	8a b3       	in	r24, 0x1a	; 26
 292:	80 6f       	ori	r24, 0xF0	; 240
 294:	8a bb       	out	0x1a, r24	; 26
 296:	c2 98       	cbi	0x18, 2	; 24
 298:	08 95       	ret

0000029a <LCD_WRITE_COMMAND>:
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
 29e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_check_lcd_isbusy>
 2a2:	cb bb       	out	0x1b, r28	; 27
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	89 7f       	andi	r24, 0xF9	; 249
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_WRITE_COMMAND+0x14>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_WRITE_COMMAND+0x1a>
 2b4:	00 00       	nop
 2b6:	0e 94 38 01 	call	0x270	; 0x270 <LCD_lcd_kick>
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <LCD_clear_screen>:
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
 2c4:	08 95       	ret

000002c6 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	87 e8       	ldi	r24, 0x87	; 135
 2c8:	93 e1       	ldi	r25, 0x13	; 19
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_INIT+0x4>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_INIT+0xa>
 2d0:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2d2:	87 b3       	in	r24, 0x17	; 23
 2d4:	87 60       	ori	r24, 0x07	; 7
 2d6:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	88 7f       	andi	r24, 0xF8	; 248
 2dc:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	8a bb       	out	0x1a, r24	; 26
 2e2:	85 ea       	ldi	r24, 0xA5	; 165
 2e4:	9e e0       	ldi	r25, 0x0E	; 14
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_INIT+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_INIT+0x26>
 2ec:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2ee:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 2f2:	88 e3       	ldi	r24, 0x38	; 56
 2f4:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
 30a:	08 95       	ret

0000030c <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 310:	0e 94 41 01 	call	0x282	; 0x282 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 314:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 316:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 318:	c1 9a       	sbi	0x18, 1	; 24
 31a:	89 ef       	ldi	r24, 0xF9	; 249
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_WRITE_CHAR+0x12>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_WRITE_CHAR+0x18>
 324:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 326:	0e 94 38 01 	call	0x270	; 0x270 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	8c 01       	movw	r16, r24
	int count = 0;
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 33c:	14 c0       	rjmp	.+40     	; 0x366 <LCD_WRITE_STRING+0x38>
		count++;
 33e:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 340:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WRITE_CHAR>
		if (count == 16)
 344:	c0 31       	cpi	r28, 0x10	; 16
 346:	d1 05       	cpc	r29, r1
 348:	21 f4       	brne	.+8      	; 0x352 <LCD_WRITE_STRING+0x24>
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 34a:	80 ec       	ldi	r24, 0xC0	; 192
 34c:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
 350:	0a c0       	rjmp	.+20     	; 0x366 <LCD_WRITE_STRING+0x38>
		LCD_WRITE_CHAR(*string++);
		if (count == 16)
		{
			LCD_GOTO_XY(2,0);
		}
		else if (count == 32)
 352:	c0 32       	cpi	r28, 0x20	; 32
 354:	d1 05       	cpc	r29, r1
 356:	39 f4       	brne	.+14     	; 0x366 <LCD_WRITE_STRING+0x38>
		{
			LCD_clear_screen();
 358:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_WRITE_COMMAND>
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 362:	c0 e0       	ldi	r28, 0x00	; 0
 364:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 366:	f8 01       	movw	r30, r16
 368:	81 91       	ld	r24, Z+
 36a:	8f 01       	movw	r16, r30
 36c:	81 11       	cpse	r24, r1
 36e:	e7 cf       	rjmp	.-50     	; 0x33e <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <SOLVE>:
#include "Keypad/keypad.h"
#include <string.h>
char eq[100]="";
uint8_t count,flag;
void SOLVE(char c)
{
 37a:	af 92       	push	r10
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	2a 97       	sbiw	r28, 0x0a	; 10
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
	switch (c)
 39e:	8d 33       	cpi	r24, 0x3D	; 61
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <SOLVE+0x2a>
 3a2:	9a c0       	rjmp	.+308    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
		{
			uint16_t ans = 0;
			char last = '?';  // To keep track of the last operator
			int j = 0;

			while (j < count)
 3a4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <count>
 3a8:	e2 2f       	mov	r30, r18
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	00 e0       	ldi	r16, 0x00	; 0
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	4f e3       	ldi	r20, 0x3F	; 63
 3b2:	a1 2c       	mov	r10, r1
 3b4:	b1 2c       	mov	r11, r1
 3b6:	9f 01       	movw	r18, r30
 3b8:	2a 57       	subi	r18, 0x7A	; 122
 3ba:	3f 4f       	sbci	r19, 0xFF	; 255
			{
				int x = 0;

				// Parse the number
				while (j < count && eq[j] != '*' && eq[j] != '-' && eq[j] != '/' && eq[j] != '+')
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
 3c0:	60 c0       	rjmp	.+192    	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
				{
					x *= 10;
 3c2:	7b 01       	movw	r14, r22
 3c4:	ee 0c       	add	r14, r14
 3c6:	ff 1c       	adc	r15, r15
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	6e 0d       	add	r22, r14
 3d6:	7f 1d       	adc	r23, r15
					x += (eq[j] - '0');
 3d8:	89 2f       	mov	r24, r25
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	c0 97       	sbiw	r24, 0x30	; 48
 3de:	68 0f       	add	r22, r24
 3e0:	79 1f       	adc	r23, r25
 3e2:	8d 01       	movw	r16, r26
 3e4:	06 58       	subi	r16, 0x86	; 134
 3e6:	10 40       	sbci	r17, 0x00	; 0
			while (j < count)
			{
				int x = 0;

				// Parse the number
				while (j < count && eq[j] != '*' && eq[j] != '-' && eq[j] != '/' && eq[j] != '+')
 3e8:	a2 17       	cp	r26, r18
 3ea:	b3 07       	cpc	r27, r19
 3ec:	79 f0       	breq	.+30     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3ee:	9d 91       	ld	r25, X+
 3f0:	86 ed       	ldi	r24, 0xD6	; 214
 3f2:	89 0f       	add	r24, r25
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	50 f0       	brcs	.+20     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3f8:	89 2f       	mov	r24, r25
 3fa:	8d 7f       	andi	r24, 0xFD	; 253
 3fc:	8d 32       	cpi	r24, 0x2D	; 45
 3fe:	09 f7       	brne	.-62     	; 0x3c2 <SOLVE+0x48>
 400:	05 c0       	rjmp	.+10     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 402:	6c 2d       	mov	r22, r12
 404:	7d 2d       	mov	r23, r13
 406:	02 c0       	rjmp	.+4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 408:	6c 2d       	mov	r22, r12
 40a:	7d 2d       	mov	r23, r13
					x += (eq[j] - '0');
					j++;
				}

				// Apply the last operation
				if (last == '?')
 40c:	4f 33       	cpi	r20, 0x3F	; 63
 40e:	11 f4       	brne	.+4      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
				{
					ans = x;  // Initialize ans with the first number
 410:	5b 01       	movw	r10, r22
 412:	2e c0       	rjmp	.+92     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
				}
				else
				{
					switch (last)
 414:	4b 32       	cpi	r20, 0x2B	; 43
 416:	a9 f0       	breq	.+42     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 418:	18 f4       	brcc	.+6      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 41a:	4a 32       	cpi	r20, 0x2A	; 42
 41c:	31 f0       	breq	.+12     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 41e:	28 c0       	rjmp	.+80     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 420:	4d 32       	cpi	r20, 0x2D	; 45
 422:	61 f0       	breq	.+24     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 424:	4f 32       	cpi	r20, 0x2F	; 47
 426:	81 f0       	breq	.+32     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 428:	23 c0       	rjmp	.+70     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
					{
						case '*':
						ans *= x;
 42a:	c5 01       	movw	r24, r10
 42c:	86 9f       	mul	r24, r22
 42e:	50 01       	movw	r10, r0
 430:	87 9f       	mul	r24, r23
 432:	b0 0c       	add	r11, r0
 434:	96 9f       	mul	r25, r22
 436:	b0 0c       	add	r11, r0
 438:	11 24       	eor	r1, r1
						break;
 43a:	1a c0       	rjmp	.+52     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
						case '-':
						ans -= x;
 43c:	a6 1a       	sub	r10, r22
 43e:	b7 0a       	sbc	r11, r23
						break;
 440:	17 c0       	rjmp	.+46     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
						case '+':
						ans += x;
 442:	a6 0e       	add	r10, r22
 444:	b7 1e       	adc	r11, r23
						break;
 446:	14 c0       	rjmp	.+40     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
						case '/':
						if (x != 0)
 448:	61 15       	cp	r22, r1
 44a:	71 05       	cpc	r23, r1
 44c:	29 f0       	breq	.+10     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
						ans /= x;
 44e:	c5 01       	movw	r24, r10
 450:	0e 94 b9 02 	call	0x572	; 0x572 <__udivmodhi4>
 454:	5b 01       	movw	r10, r22
							LCD_WRITE_STRING("Error 404");
							flag=1;
							count=0;
							return;
						}
						break;
 456:	0c c0       	rjmp	.+24     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
						case '/':
						if (x != 0)
						ans /= x;
						else
						{
							LCD_clear_screen();
 458:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
							LCD_WRITE_STRING("Error 404");
 45c:	80 e7       	ldi	r24, 0x70	; 112
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
							flag=1;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <flag>
							count=0;
 46a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <count>
 46e:	3e c0       	rjmp	.+124    	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
						break;
					}
				}

				// Update the last operator
				if (j < count)
 470:	0e 17       	cp	r16, r30
 472:	1f 07       	cpc	r17, r31
 474:	34 f4       	brge	.+12     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
				{
					last = eq[j];
 476:	d8 01       	movw	r26, r16
 478:	aa 57       	subi	r26, 0x7A	; 122
 47a:	bf 4f       	sbci	r27, 0xFF	; 255
 47c:	4c 91       	ld	r20, X
					j++;
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			uint16_t ans = 0;
			char last = '?';  // To keep track of the last operator
			int j = 0;

			while (j < count)
 482:	0e 17       	cp	r16, r30
 484:	1f 07       	cpc	r17, r31
 486:	a4 f4       	brge	.+40     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
			{
				int x = 0;

				// Parse the number
				while (j < count && eq[j] != '*' && eq[j] != '-' && eq[j] != '/' && eq[j] != '+')
 488:	d8 01       	movw	r26, r16
 48a:	aa 57       	subi	r26, 0x7A	; 122
 48c:	bf 4f       	sbci	r27, 0xFF	; 255
 48e:	9c 91       	ld	r25, X
 490:	86 ed       	ldi	r24, 0xD6	; 214
 492:	89 0f       	add	r24, r25
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	08 f4       	brcc	.+2      	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
 498:	b4 cf       	rjmp	.-152    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 49a:	89 2f       	mov	r24, r25
 49c:	8d 7f       	andi	r24, 0xFD	; 253
 49e:	8d 32       	cpi	r24, 0x2D	; 45
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 4a2:	b2 cf       	rjmp	.-156    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 4a4:	d8 01       	movw	r26, r16
 4a6:	a9 57       	subi	r26, 0x79	; 121
 4a8:	bf 4f       	sbci	r27, 0xFF	; 255
 4aa:	6c 2d       	mov	r22, r12
 4ac:	7d 2d       	mov	r23, r13
 4ae:	89 cf       	rjmp	.-238    	; 0x3c2 <SOLVE+0x48>
					j++;
				}
			}

			// Display the result on the LCD
			LCD_clear_screen();
 4b0:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
			char ss[10];
			itoa(ans, ss, 10);  // Convert the integer 'ans' to a string and store it in 'ss'
 4b4:	4a e0       	ldi	r20, 0x0A	; 10
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	be 01       	movw	r22, r28
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	c5 01       	movw	r24, r10
 4c0:	0e 94 cd 02 	call	0x59a	; 0x59a <itoa>
			LCD_WRITE_STRING(ss);
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
			
			count=0;
 4cc:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <count>
flag=1;		}
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <flag>
		break;
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>

		default:
		eq[count] = c;
 4d8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <count>
 4dc:	e9 2f       	mov	r30, r25
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ea 57       	subi	r30, 0x7A	; 122
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	80 83       	st	Z, r24
		count++;
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <count>
		break;
	}
}
 4ec:	2a 96       	adiw	r28, 0x0a	; 10
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	df 90       	pop	r13
 506:	cf 90       	pop	r12
 508:	bf 90       	pop	r11
 50a:	af 90       	pop	r10
 50c:	08 95       	ret

0000050e <main>:


int main()
{
	
	LCD_INIT();
 50e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_INIT>
	count=0;
 512:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <count>
	Keypad_init();
 516:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
 51a:	83 ed       	ldi	r24, 0xD3	; 211
 51c:	90 e3       	ldi	r25, 0x30	; 48
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <main+0x10>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x16>
 524:	00 00       	nop
	_delay_ms(50);
	LCD_WRITE_STRING("hi Esraa !");
 526:	8a e7       	ldi	r24, 0x7A	; 122
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_WRITE_STRING>
 52e:	83 ed       	ldi	r24, 0xD3	; 211
 530:	90 e3       	ldi	r25, 0x30	; 48
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <main+0x24>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0x2a>
 538:	00 00       	nop
	_delay_ms(50);
	LCD_clear_screen();
 53a:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
	unsigned char key_pressed;
	flag=0;
 53e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <flag>
	while(1){
		key_pressed = Keypad_getkey();
 542:	0e 94 52 00 	call	0xa4	; 0xa4 <Keypad_getkey>
 546:	c8 2f       	mov	r28, r24
		switch(key_pressed){
 548:	8f 33       	cpi	r24, 0x3F	; 63
 54a:	19 f0       	breq	.+6      	; 0x552 <main+0x44>
 54c:	81 34       	cpi	r24, 0x41	; 65
 54e:	c9 f3       	breq	.-14     	; 0x542 <main+0x34>
 550:	05 c0       	rjmp	.+10     	; 0x55c <main+0x4e>
			case 'A':
				break;
			case '?':
				LCD_clear_screen();
 552:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_clear_screen>
					flag=0;
 556:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <flag>
				break;
 55a:	f3 cf       	rjmp	.-26     	; 0x542 <main+0x34>
			default:
				if (flag==0)
 55c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <flag>
 560:	81 11       	cpse	r24, r1
 562:	03 c0       	rjmp	.+6      	; 0x56a <main+0x5c>
				LCD_WRITE_CHAR(key_pressed);
 564:	8c 2f       	mov	r24, r28
 566:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WRITE_CHAR>
				SOLVE(key_pressed);
 56a:	8c 2f       	mov	r24, r28
 56c:	0e 94 bd 01 	call	0x37a	; 0x37a <SOLVE>
				
				break;
 570:	e8 cf       	rjmp	.-48     	; 0x542 <main+0x34>

00000572 <__udivmodhi4>:
 572:	aa 1b       	sub	r26, r26
 574:	bb 1b       	sub	r27, r27
 576:	51 e1       	ldi	r21, 0x11	; 17
 578:	07 c0       	rjmp	.+14     	; 0x588 <__udivmodhi4_ep>

0000057a <__udivmodhi4_loop>:
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	a6 17       	cp	r26, r22
 580:	b7 07       	cpc	r27, r23
 582:	10 f0       	brcs	.+4      	; 0x588 <__udivmodhi4_ep>
 584:	a6 1b       	sub	r26, r22
 586:	b7 0b       	sbc	r27, r23

00000588 <__udivmodhi4_ep>:
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	5a 95       	dec	r21
 58e:	a9 f7       	brne	.-22     	; 0x57a <__udivmodhi4_loop>
 590:	80 95       	com	r24
 592:	90 95       	com	r25
 594:	bc 01       	movw	r22, r24
 596:	cd 01       	movw	r24, r26
 598:	08 95       	ret

0000059a <itoa>:
 59a:	45 32       	cpi	r20, 0x25	; 37
 59c:	51 05       	cpc	r21, r1
 59e:	20 f4       	brcc	.+8      	; 0x5a8 <itoa+0xe>
 5a0:	42 30       	cpi	r20, 0x02	; 2
 5a2:	10 f0       	brcs	.+4      	; 0x5a8 <itoa+0xe>
 5a4:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__itoa_ncheck>
 5a8:	fb 01       	movw	r30, r22
 5aa:	10 82       	st	Z, r1
 5ac:	cb 01       	movw	r24, r22
 5ae:	08 95       	ret

000005b0 <__itoa_ncheck>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	4a 30       	cpi	r20, 0x0A	; 10
 5b4:	31 f4       	brne	.+12     	; 0x5c2 <__itoa_ncheck+0x12>
 5b6:	99 23       	and	r25, r25
 5b8:	22 f4       	brpl	.+8      	; 0x5c2 <__itoa_ncheck+0x12>
 5ba:	bd e2       	ldi	r27, 0x2D	; 45
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__utoa_common>

000005c6 <__utoa_ncheck>:
 5c6:	bb 27       	eor	r27, r27

000005c8 <__utoa_common>:
 5c8:	fb 01       	movw	r30, r22
 5ca:	55 27       	eor	r21, r21
 5cc:	aa 27       	eor	r26, r26
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	aa 1f       	adc	r26, r26
 5d4:	a4 17       	cp	r26, r20
 5d6:	10 f0       	brcs	.+4      	; 0x5dc <__utoa_common+0x14>
 5d8:	a4 1b       	sub	r26, r20
 5da:	83 95       	inc	r24
 5dc:	50 51       	subi	r21, 0x10	; 16
 5de:	b9 f7       	brne	.-18     	; 0x5ce <__utoa_common+0x6>
 5e0:	a0 5d       	subi	r26, 0xD0	; 208
 5e2:	aa 33       	cpi	r26, 0x3A	; 58
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <__utoa_common+0x20>
 5e6:	a9 5d       	subi	r26, 0xD9	; 217
 5e8:	a1 93       	st	Z+, r26
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	79 f7       	brne	.-34     	; 0x5cc <__utoa_common+0x4>
 5ee:	b1 11       	cpse	r27, r1
 5f0:	b1 93       	st	Z+, r27
 5f2:	11 92       	st	Z+, r1
 5f4:	cb 01       	movw	r24, r22
 5f6:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <strrev>

000005fa <strrev>:
 5fa:	dc 01       	movw	r26, r24
 5fc:	fc 01       	movw	r30, r24
 5fe:	67 2f       	mov	r22, r23
 600:	71 91       	ld	r23, Z+
 602:	77 23       	and	r23, r23
 604:	e1 f7       	brne	.-8      	; 0x5fe <strrev+0x4>
 606:	32 97       	sbiw	r30, 0x02	; 2
 608:	04 c0       	rjmp	.+8      	; 0x612 <strrev+0x18>
 60a:	7c 91       	ld	r23, X
 60c:	6d 93       	st	X+, r22
 60e:	70 83       	st	Z, r23
 610:	62 91       	ld	r22, -Z
 612:	ae 17       	cp	r26, r30
 614:	bf 07       	cpc	r27, r31
 616:	c8 f3       	brcs	.-14     	; 0x60a <strrev+0x10>
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
